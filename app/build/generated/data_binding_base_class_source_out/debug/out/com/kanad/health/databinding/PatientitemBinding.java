// Generated by view binder compiler. Do not edit!
package com.kanad.health.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.kanad.health.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PatientitemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView DoctorUidDummy;

  @NonNull
  public final TextView ageOnList;

  @NonNull
  public final TextView genderOnList;

  @NonNull
  public final CircleImageView imagePatient;

  @NonNull
  public final TextView patientName;

  private PatientitemBinding(@NonNull CardView rootView, @NonNull TextView DoctorUidDummy,
      @NonNull TextView ageOnList, @NonNull TextView genderOnList,
      @NonNull CircleImageView imagePatient, @NonNull TextView patientName) {
    this.rootView = rootView;
    this.DoctorUidDummy = DoctorUidDummy;
    this.ageOnList = ageOnList;
    this.genderOnList = genderOnList;
    this.imagePatient = imagePatient;
    this.patientName = patientName;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static PatientitemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PatientitemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.patientitem, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PatientitemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Doctor_uid_dummy;
      TextView DoctorUidDummy = ViewBindings.findChildViewById(rootView, id);
      if (DoctorUidDummy == null) {
        break missingId;
      }

      id = R.id.age_on_list;
      TextView ageOnList = ViewBindings.findChildViewById(rootView, id);
      if (ageOnList == null) {
        break missingId;
      }

      id = R.id.gender_on_list;
      TextView genderOnList = ViewBindings.findChildViewById(rootView, id);
      if (genderOnList == null) {
        break missingId;
      }

      id = R.id.image_patient;
      CircleImageView imagePatient = ViewBindings.findChildViewById(rootView, id);
      if (imagePatient == null) {
        break missingId;
      }

      id = R.id.patient_Name;
      TextView patientName = ViewBindings.findChildViewById(rootView, id);
      if (patientName == null) {
        break missingId;
      }

      return new PatientitemBinding((CardView) rootView, DoctorUidDummy, ageOnList, genderOnList,
          imagePatient, patientName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
