// Generated by view binder compiler. Do not edit!
package com.kanad.health.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.kanad.health.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PreviousdoctoritemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView DoctorNamePrevious;

  @NonNull
  public final TextView DoctorUidDummy;

  @NonNull
  public final ImageView bookmarkselected;

  @NonNull
  public final ImageView bookmarkunselected;

  @NonNull
  public final TextView datePrevious;

  @NonNull
  public final TextView doctorInstituteOnList;

  @NonNull
  public final TextView doctorSpecilizationOnListPrevious;

  @NonNull
  public final TextView doctorVerificationOnListPrevious;

  @NonNull
  public final CircleImageView imageDoctorPrevious;

  @NonNull
  public final ImageView verifiedcheckPrevious;

  @NonNull
  public final ImageView waitclock;

  private PreviousdoctoritemBinding(@NonNull CardView rootView,
      @NonNull TextView DoctorNamePrevious, @NonNull TextView DoctorUidDummy,
      @NonNull ImageView bookmarkselected, @NonNull ImageView bookmarkunselected,
      @NonNull TextView datePrevious, @NonNull TextView doctorInstituteOnList,
      @NonNull TextView doctorSpecilizationOnListPrevious,
      @NonNull TextView doctorVerificationOnListPrevious,
      @NonNull CircleImageView imageDoctorPrevious, @NonNull ImageView verifiedcheckPrevious,
      @NonNull ImageView waitclock) {
    this.rootView = rootView;
    this.DoctorNamePrevious = DoctorNamePrevious;
    this.DoctorUidDummy = DoctorUidDummy;
    this.bookmarkselected = bookmarkselected;
    this.bookmarkunselected = bookmarkunselected;
    this.datePrevious = datePrevious;
    this.doctorInstituteOnList = doctorInstituteOnList;
    this.doctorSpecilizationOnListPrevious = doctorSpecilizationOnListPrevious;
    this.doctorVerificationOnListPrevious = doctorVerificationOnListPrevious;
    this.imageDoctorPrevious = imageDoctorPrevious;
    this.verifiedcheckPrevious = verifiedcheckPrevious;
    this.waitclock = waitclock;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static PreviousdoctoritemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PreviousdoctoritemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.previousdoctoritem, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PreviousdoctoritemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Doctor_Name_previous;
      TextView DoctorNamePrevious = ViewBindings.findChildViewById(rootView, id);
      if (DoctorNamePrevious == null) {
        break missingId;
      }

      id = R.id.Doctor_uid_dummy;
      TextView DoctorUidDummy = ViewBindings.findChildViewById(rootView, id);
      if (DoctorUidDummy == null) {
        break missingId;
      }

      id = R.id.bookmarkselected;
      ImageView bookmarkselected = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkselected == null) {
        break missingId;
      }

      id = R.id.bookmarkunselected;
      ImageView bookmarkunselected = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkunselected == null) {
        break missingId;
      }

      id = R.id.date_previous;
      TextView datePrevious = ViewBindings.findChildViewById(rootView, id);
      if (datePrevious == null) {
        break missingId;
      }

      id = R.id.doctor_institute_on_list;
      TextView doctorInstituteOnList = ViewBindings.findChildViewById(rootView, id);
      if (doctorInstituteOnList == null) {
        break missingId;
      }

      id = R.id.doctor_specilization_on_list_previous;
      TextView doctorSpecilizationOnListPrevious = ViewBindings.findChildViewById(rootView, id);
      if (doctorSpecilizationOnListPrevious == null) {
        break missingId;
      }

      id = R.id.doctor_verification_on_list_previous;
      TextView doctorVerificationOnListPrevious = ViewBindings.findChildViewById(rootView, id);
      if (doctorVerificationOnListPrevious == null) {
        break missingId;
      }

      id = R.id.image_doctor_previous;
      CircleImageView imageDoctorPrevious = ViewBindings.findChildViewById(rootView, id);
      if (imageDoctorPrevious == null) {
        break missingId;
      }

      id = R.id.verifiedcheck_previous;
      ImageView verifiedcheckPrevious = ViewBindings.findChildViewById(rootView, id);
      if (verifiedcheckPrevious == null) {
        break missingId;
      }

      id = R.id.waitclock;
      ImageView waitclock = ViewBindings.findChildViewById(rootView, id);
      if (waitclock == null) {
        break missingId;
      }

      return new PreviousdoctoritemBinding((CardView) rootView, DoctorNamePrevious, DoctorUidDummy,
          bookmarkselected, bookmarkunselected, datePrevious, doctorInstituteOnList,
          doctorSpecilizationOnListPrevious, doctorVerificationOnListPrevious, imageDoctorPrevious,
          verifiedcheckPrevious, waitclock);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
